x-common-env: &common-env
  DOMAIN: ${DOMAIN:-localhost}
  PROJECT_NAME: ${PROJECT_NAME:-webapp}
  FRONTEND_HOST: ${FRONTEND_HOST:-http://localhost:5173}
  ENVIRONMENT: ${ENVIRONMENT:-local}
  BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:5173}
  SECRET_KEY: ${SECRET_KEY:-changethis-insecure-key-for-development-only}
  FIRST_SUPERUSER: ${FIRST_SUPERUSER:-admin@example.com}
  FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:-changethis}
  SMTP_HOST: ${SMTP_HOST:-}
  SMTP_USER: ${SMTP_USER:-}
  SMTP_PASSWORD: ${SMTP_PASSWORD:-}
  EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL:-noreply@example.com}
  POSTGRES_SERVER: db
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_DB: ${POSTGRES_DB:-app}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changethis}
  SENTRY_DSN: ${SENTRY_DSN:-}

services:

  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME:-webapp}-adminer-http.rule=Host(`adminer.${DOMAIN:-localhost}`)
      - traefik.http.routers.${STACK_NAME:-webapp}-adminer-http.entrypoints=http
      - traefik.http.services.${STACK_NAME:-webapp}-adminer.loadbalancer.server.port=8080

  prestart:
    image: '${DOCKER_IMAGE_BACKEND:-webapp-backend}:${TAG:-latest}'
    build:
      context: ./backend
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    environment:
      <<: *common-env

  backend:
    image: '${DOCKER_IMAGE_BACKEND:-webapp-backend}:${TAG:-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    environment:
      <<: *common-env

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME:-webapp}-backend.loadbalancer.server.port=8000

      - traefik.http.routers.${STACK_NAME:-webapp}-backend-http.rule=Host(`api.${DOMAIN:-localhost}`)
      - traefik.http.routers.${STACK_NAME:-webapp}-backend-http.entrypoints=http


  frontend:
    image: '${DOCKER_IMAGE_FRONTEND:-webapp-frontend}:${TAG:-latest}'
    restart: always
    ports:
      - "5173:80"
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://api.${DOMAIN:-localhost}
        - NODE_ENV=production
    environment:
      <<: *common-env
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME:-webapp}-frontend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME:-webapp}-frontend-http.rule=Host(`dashboard.${DOMAIN:-localhost}`)
      - traefik.http.routers.${STACK_NAME:-webapp}-frontend-http.entrypoints=http

volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
