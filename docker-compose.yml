x-common-env: &common-env
  DOMAIN: ${DOMAIN:-eli.com}
  PROJECT_NAME: ${PROJECT_NAME:-webapp}
  FRONTEND_HOST: ${FRONTEND_HOST:-https://dashboard.${DOMAIN:-eli.com}}
  ENVIRONMENT: ${ENVIRONMENT:-local}
  BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-https://dashboard.${DOMAIN:-eli.com},http://dashboard.${DOMAIN:-eli.com}}
  SECRET_KEY: ${SECRET_KEY:-changethis-insecure-key-for-development-only}
  FIRST_SUPERUSER: ${FIRST_SUPERUSER:-admin@example.com}
  FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:-changethis}
  SMTP_HOST: ${SMTP_HOST:-}
  SMTP_USER: ${SMTP_USER:-}
  SMTP_PASSWORD: ${SMTP_PASSWORD:-}
  EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL:-noreply@example.com}
  POSTGRES_SERVER: db
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_DB: ${POSTGRES_DB:-app}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changethis}
  SENTRY_DSN: ${SENTRY_DSN:-}

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik-public
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/certs
      - --providers.file.watch=true
      # HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"

  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      # HTTP version
      - "traefik.http.routers.adminer-http.rule=Host(`adminer.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.adminer-http.entrypoints=web"

  prestart:
    image: '${DOCKER_IMAGE_BACKEND:-webapp-backend}:${TAG:-latest}'
    build:
      context: ./backend
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    environment:
      <<: *common-env

  backend:
    image: '${DOCKER_IMAGE_BACKEND:-webapp-backend}:${TAG:-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    environment:
      <<: *common-env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      # HTTPS
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      # HTTP version
      - "traefik.http.routers.backend-http.rule=Host(`api.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.backend-http.entrypoints=web"

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND:-webapp-frontend}:${TAG:-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN:-eli.com}
        - NODE_ENV=production
    environment:
      <<: *common-env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      # HTTPS
      - "traefik.http.routers.frontend.rule=Host(`dashboard.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # HTTP version
      - "traefik.http.routers.frontend-http.rule=Host(`dashboard.${DOMAIN:-eli.com}`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"

volumes:
  app-db-data:

networks:
  traefik-public:
    external: true
    